'use client';

import React, { createContext, useContext, useEffect, useState, ReactNode, useCallback } from 'react';
import { APIBanner } from '@/hooks/useBannersAPI';
import { APIUser } from '@/types/user';
import { CaseData } from '@/hooks/useCasesAPI';
import { LiveWinData } from '@/hooks/useLiveWins';
import useGameResultsAPI from '@/hooks/useGameResultsAPI';
import { getAuthToken, hasAuthToken } from '@/lib/auth';
import { API_ENDPOINTS, DEV_CONFIG, isDevelopment, API_BASE_URL } from '@/lib/config';
import { generateRandomItems } from '@/lib/caseUtils';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface PreloadedData {
  banners: APIBanner[];
  user: APIUser | null;
  cases: CaseData[];
  liveWins: LiveWinData[];
  isLoaded: boolean;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏
interface DataPreloadContextType extends PreloadedData {
  refreshBanners: () => Promise<void>;
  refreshUser: () => Promise<void>;
  refreshCases: () => Promise<void>;
  refreshAllData: () => Promise<void>;
  updateBalanceLocally: (amount: number) => void;
  decreaseBalanceLocally: (amount: number) => void;
  forceReloadData: () => Promise<void>;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const DataPreloadContext = createContext<DataPreloadContextType | undefined>(undefined);

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const usePreloadedData = () => {
  const context = useContext(DataPreloadContext);
  if (context === undefined) {
    throw new Error('usePreloadedData –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ DataPreloadProvider');
  }
  return context;
};

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const mockBanners: APIBanner[] = [
  { id: '1', imageUrl: '/Frame 116.png', url: '/news/1' },
  { id: '2', imageUrl: '/image 27.png', url: '/news/2' }
];

const mockUser: APIUser = {
  id: 'dev-user-id',
  nickname: 'DevUser',
  balance: 1000,
  level: 5,
  avatarUrl: 'https://avatar.spoverlay.ru/face/DevUser?w=512',
  permission: 'user'
};

const mockLiveWins: LiveWinData[] = [
  {
    id: 'mock-1',
    playerName: 'Player123',
    rarity: 'Legendary',
    percentage: '0.01%',
    itemImage: 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/netherite_sword/icon',
    itemName: '–ó–æ–ª–æ—Ç–æ–π –º–µ—á',
    apValue: 999.5,
    amount: 1,
    timestamp: new Date(Date.now() - 1000 * 60 * 5)
  },
  {
    id: 'mock-2',
    playerName: 'GamerPro',
    rarity: 'Epic',
    percentage: '0.5%',
    itemImage: 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/diamond_chestplate/icon',
    itemName: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —â–∏—Ç',
    apValue: 250.3,
    amount: 2,
    timestamp: new Date(Date.now() - 1000 * 60 * 15)
  },
  {
    id: 'mock-3',
    playerName: 'LuckyOne',
    rarity: 'Rare',
    percentage: '2.5%',
    itemImage: 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/diamond/icon',
    itemName: '–†–µ–¥–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª',
    apValue: 100.7,
    amount: 16,
    timestamp: new Date(Date.now() - 1000 * 60 * 30)
  }
];

interface DataPreloadProviderProps {
  children: ReactNode;
}

// –ö–ª—é—á–∏ –¥–ª—è sessionStorage
const SESSION_CACHE_KEYS = {
  IS_INITIALIZED: 'dd_cache_initialized',
  BANNERS: 'dd_cache_banners',
  CASES: 'dd_cache_cases',
  LIVE_WINS: 'dd_cache_live_wins',
  LAST_LOAD_TIME: 'dd_cache_last_load_time'
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sessionStorage –∫–µ—à–µ–º
const sessionCache = {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–µ—à
  get isInitialized(): boolean {
    if (typeof window === 'undefined') return false;
    return sessionStorage.getItem(SESSION_CACHE_KEYS.IS_INITIALIZED) === 'true';
  },
  
  set isInitialized(value: boolean) {
    if (typeof window === 'undefined') return;
    sessionStorage.setItem(SESSION_CACHE_KEYS.IS_INITIALIZED, value.toString());
  },

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
  getBanners(): APIBanner[] | null {
    if (typeof window === 'undefined') return null;
    const data = sessionStorage.getItem(SESSION_CACHE_KEYS.BANNERS);
    return data ? JSON.parse(data) : null;
  },

  setBanners(banners: APIBanner[] | null) {
    if (typeof window === 'undefined') return;
    if (banners) {
      sessionStorage.setItem(SESSION_CACHE_KEYS.BANNERS, JSON.stringify(banners));
    } else {
      sessionStorage.removeItem(SESSION_CACHE_KEYS.BANNERS);
    }
  },

  getCases(): CaseData[] | null {
    if (typeof window === 'undefined') return null;
    const data = sessionStorage.getItem(SESSION_CACHE_KEYS.CASES);
    return data ? JSON.parse(data) : null;
  },

  setCases(cases: CaseData[] | null) {
    if (typeof window === 'undefined') return;
    if (cases) {
      sessionStorage.setItem(SESSION_CACHE_KEYS.CASES, JSON.stringify(cases));
    } else {
      sessionStorage.removeItem(SESSION_CACHE_KEYS.CASES);
    }
  },

  getLiveWins(): LiveWinData[] | null {
    if (typeof window === 'undefined') return null;
    const data = sessionStorage.getItem(SESSION_CACHE_KEYS.LIVE_WINS);
    return data ? JSON.parse(data) : null;
  },

  setLiveWins(liveWins: LiveWinData[] | null) {
    if (typeof window === 'undefined') return;
    if (liveWins) {
      sessionStorage.setItem(SESSION_CACHE_KEYS.LIVE_WINS, JSON.stringify(liveWins));
    } else {
      sessionStorage.removeItem(SESSION_CACHE_KEYS.LIVE_WINS);
    }
  },

  // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à
  clear() {
    if (typeof window === 'undefined') return;
    Object.values(SESSION_CACHE_KEYS).forEach(key => {
      sessionStorage.removeItem(key);
    });
  },

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
  setLastLoadTime(time: number) {
    if (typeof window === 'undefined') return;
    sessionStorage.setItem(SESSION_CACHE_KEYS.LAST_LOAD_TIME, time.toString());
  },

  getLastLoadTime(): number {
    if (typeof window === 'undefined') return 0;
    const time = sessionStorage.getItem(SESSION_CACHE_KEYS.LAST_LOAD_TIME);
    return time ? parseInt(time, 10) : 0;
  }
};

export default function DataPreloadProvider({ children }: DataPreloadProviderProps) {
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
  const [providerId] = useState(() => Math.random().toString(36).substr(2, 9));
  
  // –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
  const { fetchGameResults } = useGameResultsAPI();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const [banners, setBanners] = useState<APIBanner[]>(() => sessionCache.getBanners() || []);
  const [user, setUser] = useState<APIUser | null>(null);
  const [cases, setCases] = useState<CaseData[]>(() => sessionCache.getCases() || []);
  const [liveWins, setLiveWins] = useState<LiveWinData[]>(() => sessionCache.getLiveWins() || []);
  const [isLoading, setIsLoading] = useState(!sessionCache.isInitialized);
  const [error, setError] = useState<string | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentToken, setCurrentToken] = useState<string | null>(getAuthToken());
  const [hasInitialLoad, setHasInitialLoad] = useState(sessionCache.isInitialized);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤
  const loadBanners = useCallback(async (forceReload = false): Promise<APIBanner[]> => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      const cachedBanners = sessionCache.getBanners();
      if (!forceReload && cachedBanners && sessionCache.isInitialized) {
        console.log(`üì¶ [${providerId}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã`);
        return cachedBanners;
      }

      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log(`üîß [${providerId}] Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –±–∞–Ω–Ω–µ—Ä—ã`);
        const result = [...mockBanners];
        sessionCache.setBanners(result);
        return result;
      }

      const token = getAuthToken();
      if (!token) {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä
        const result = [{
          id: 'default',
          imageUrl: '/Frame 116.png',
          url: '/news/1'
        }];
        sessionCache.setBanners(result);
        return result;
      }

      const response = await fetch(API_ENDPOINTS.banners, {
        method: 'GET',
        headers: {
          'accept': '*/*',
          'Authorization': `${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API –±–∞–Ω–Ω–µ—Ä–æ–≤: ${response.status}`);
      }

      const result = await response.json();
      sessionCache.setBanners(result);
      return result;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–Ω–Ω–µ—Ä–æ–≤:', err);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const result = [{
        id: 'default',
        imageUrl: '/Frame 116.png',
        url: '/news/1'
      }];
      sessionCache.setBanners(result);
      return result;
    }
  }, [providerId]);

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è dev —Ä–µ–∂–∏–º–∞
  const [cachedMockUser] = useState(() => ({ ...mockUser }));

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUser = useCallback(async (): Promise<APIUser | null> => {
    try {
      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log(`üîß [${providerId}] Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
        return cachedMockUser;
      }

      const token = getAuthToken();
      if (!token) {
        return null;
      }

      const response = await fetch(API_ENDPOINTS.users.me, {
        method: 'GET',
        headers: {
          'accept': '*/*',
          'Authorization': `${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.status}`);
      }

      return await response.json();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      return null;
    }
  }, [providerId, cachedMockUser]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤
  const loadCases = useCallback(async (forceReload = false): Promise<CaseData[]> => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      const cachedCases = sessionCache.getCases();
      if (!forceReload && cachedCases && sessionCache.isInitialized) {
        console.log(`üì¶ [${providerId}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–µ–π—Å—ã`);
        return cachedCases;
      }

      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log(`üîß [${providerId}] Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –∫–µ–π—Å—ã`);
        const result = DEV_CONFIG.mockCases.map(caseData => ({
          ...caseData,
          description: caseData.description || null,
          items: caseData.items || generateRandomItems(caseData.price)
        }));
        sessionCache.setCases(result);
        return result;
      }

      const token = getAuthToken();
      if (!token) {
        const result: CaseData[] = [];
        sessionCache.setCases(result);
        return result;
      }

      const response = await fetch(`${API_BASE_URL}/cases?page=1&pageSize=50`, {
        method: 'GET',
        headers: {
          'accept': '*/*',
          'Authorization': token,
        },
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API –∫–µ–π—Å–æ–≤: ${response.status}`);
      }

      const data = await response.json();
      const result = data.cases || [];
      sessionCache.setCases(result);
      return result;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤:', err);
      const result: CaseData[] = [];
      sessionCache.setCases(result);
      return result;
    }
  }, [providerId]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∏–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π (–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
  const loadInitialLiveWins = useCallback(async (forceReload = false): Promise<LiveWinData[]> => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      const cachedLiveWins = sessionCache.getLiveWins();
      if (!forceReload && cachedLiveWins && sessionCache.isInitialized) {
        console.log(`üì¶ [${providerId}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ live wins`);
        return cachedLiveWins;
      }

      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log(`üîß [${providerId}] Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –≤—ã–∏–≥—Ä—ã—à–∏`);
        const result = [...mockLiveWins];
        sessionCache.setLiveWins(result);
        return result;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = getAuthToken();
      if (!token) {
        console.log(`‚ö†Ô∏è [${providerId}] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è live wins`);
        const result = [...mockLiveWins];
        sessionCache.setLiveWins(result);
        return result;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
      console.log(`üöÄ [${providerId}] –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ live wins —á–µ—Ä–µ–∑ API...`);
      const apiResults = await fetchGameResults();
      console.log(`‚úÖ [${providerId}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${apiResults.length} –Ω–∞—á–∞–ª—å–Ω—ã—Ö live wins –∏–∑ API`);
      
      sessionCache.setLiveWins(apiResults);
      return apiResults;
    } catch (err) {
      console.error(`‚ùå [${providerId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π:`, err);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
      console.log(`üîÑ [${providerId}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback`);
      const result = [...mockLiveWins];
      sessionCache.setLiveWins(result);
      return result;
    }
  }, [providerId, fetchGameResults]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const preloadAllData = useCallback(async (isInitialLoad = false, forceReload = false) => {
    try {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (sessionCache.isInitialized && !forceReload && !isInitialLoad) {
        console.log(`üì¶ [${providerId}] –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        const cachedBanners = sessionCache.getBanners();
        const cachedCases = sessionCache.getCases();
        const cachedLiveWins = sessionCache.getLiveWins();
        
        if (cachedBanners) setBanners(cachedBanners);
        if (cachedCases) setCases(cachedCases);
        if (cachedLiveWins) setLiveWins(cachedLiveWins);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–∏ –Ω–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è)
        const userData = await loadUser();
        setUser(userData);
        setIsAuthenticated(hasAuthToken());
        
        setIsLoading(false);
        setHasInitialLoad(true);
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      if (isInitialLoad || !hasInitialLoad) {
        setIsLoading(true);
        setError(null);
      }

      console.log(`üöÄ [${providerId}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...`);
      console.log(`üìä [${providerId}] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:`, {
        isInitialLoad,
        hasInitialLoad,
        forceReload,
        cacheInitialized: sessionCache.isInitialized,
        currentToken: !!currentToken,
        authToken: !!getAuthToken()
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      const authenticated = hasAuthToken();
      setIsAuthenticated(authenticated);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const [bannersData, userData, casesData, liveWinsData] = await Promise.all([
        loadBanners(forceReload),
        loadUser(), // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
        loadCases(forceReload),
        loadInitialLiveWins(forceReload)
      ]);

      setBanners(bannersData);
      setUser(userData);
      setCases(casesData);
      setLiveWins(liveWinsData);

      // –ü–æ–º–µ—á–∞–µ–º –∫–µ—à –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      sessionCache.isInitialized = true;
      sessionCache.setLastLoadTime(Date.now());

      console.log(`‚úÖ [${providerId}] –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∫–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω`);

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      if (isInitialLoad || !hasInitialLoad) {
        await new Promise(resolve => setTimeout(resolve, 500));
        setHasInitialLoad(true);
      }

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error(`‚ùå [${providerId}] –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:`, errorMessage);
    } finally {
      // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      if (isInitialLoad || !hasInitialLoad) {
        setIsLoading(false);
      }
    }
  }, [hasInitialLoad, currentToken, loadBanners, loadCases, loadInitialLiveWins, loadUser, providerId]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const refreshBanners = async () => {
    try {
      const bannersData = await loadBanners(true);
      setBanners(bannersData);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–æ–≤:', err);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const forceReloadData = useCallback(async () => {
    console.log(`üîÑ [${providerId}] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...`);
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à —Å–µ—Å—Å–∏–∏
    sessionCache.clear();
    
    setHasInitialLoad(false);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await preloadAllData(true, true);
  }, [preloadAllData, providerId]);

  const refreshUser = async () => {
    try {
      console.log('üîÑ refreshUser: –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      console.trace('üîç refreshUser: Stack trace –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Ç–∫—É–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');
      const oldBalance = user?.balance;
      console.log('üí∞ refreshUser: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', oldBalance);
      
      const userData = await loadUser();
      console.log('üìä refreshUser: –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      console.log('üí∞ refreshUser: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', userData?.balance);
      
      setUser(userData);
      setIsAuthenticated(hasAuthToken());
      
      console.log('‚úÖ refreshUser: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      if (oldBalance !== userData?.balance) {
        console.log(`üí∏ refreshUser: –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${oldBalance} –Ω–∞ ${userData?.balance}`);
      }
    } catch (err) {
      console.error('‚ùå refreshUser: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    }
  };

  const refreshCases = async () => {
    try {
      const casesData = await loadCases(true);
      setCases(casesData);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–æ–≤:', err);
    }
  };

  const refreshAllData = async () => {
    await preloadAllData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–∫–∞–∑–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ)
  const updateBalanceLocally = useCallback((amount: number) => {
    console.log(`üí∞ updateBalanceLocally: –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount}`);
    console.trace('üîç updateBalanceLocally: Stack trace –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Ç–∫—É–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');
    
    setUser(prevUser => {
      if (!prevUser) {
        console.log('‚ö†Ô∏è updateBalanceLocally: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return prevUser;
      }
      
      const oldBalance = prevUser.balance;
      const newBalance = oldBalance + amount;
      console.log(`üí∞ updateBalanceLocally: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Å ${oldBalance} –Ω–∞ ${amount}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
      
      return {
        ...prevUser,
        balance: newBalance
      };
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–µ–π—Å–∞)
  const decreaseBalanceLocally = useCallback((amount: number) => {
    console.log(`üí∞ decreaseBalanceLocally: –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount}`);
    console.trace('üîç decreaseBalanceLocally: Stack trace –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Ç–∫—É–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');
    
    setUser(prevUser => {
      if (!prevUser) {
        console.log('‚ö†Ô∏è decreaseBalanceLocally: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return prevUser;
      }
      
      const oldBalance = prevUser.balance;
      const newBalance = Math.max(0, oldBalance - amount);
      console.log(`üí∞ decreaseBalanceLocally: –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å —Å ${oldBalance} –Ω–∞ ${amount}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
      
      return {
        ...prevUser,
        balance: newBalance
      };
    });
  }, []);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –≤ dev —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    const token = getAuthToken();
    const shouldLoad = (token || (isDevelopment && DEV_CONFIG.skipAuth)) && !hasInitialLoad;
    
    console.log(`üîß [${providerId}] useEffect #1 (–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Ç–æ–∫–µ–Ω:`, !!token, 'dev —Ä–µ–∂–∏–º:', isDevelopment && DEV_CONFIG.skipAuth);
    console.log(`üîß [${providerId}] useEffect #1: shouldLoad =`, shouldLoad, '(—Ç–æ–∫–µ–Ω:', !!token, 'hasInitialLoad =', hasInitialLoad, ')');
    
    if (shouldLoad) {
      console.log(`üöÄ [${providerId}] useEffect #1: –í—ã–∑—ã–≤–∞–µ–º preloadAllData(true) - –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞`);
      preloadAllData(true);
    } else if ((token || (isDevelopment && DEV_CONFIG.skipAuth)) && hasInitialLoad) {
      console.log(`‚ö†Ô∏è [${providerId}] useEffect #1: –¢–æ–∫–µ–Ω –µ—Å—Ç—å, –Ω–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É`);
    } else {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      console.log(`‚è≥ [${providerId}] useEffect #1: –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...`);
      setIsLoading(true);
    }
  }, [preloadAllData, hasInitialLoad, providerId]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  useEffect(() => {
    console.log(`üîß [${providerId}] useEffect #2 (—Ç–æ–∫–µ–Ω): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞`);
    let isActive = true; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
    
    const checkTokenInterval = setInterval(() => {
      if (!isActive) return;
      
      const token = getAuthToken();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (token !== currentToken) {
        console.log(`üîÑ [${providerId}] useEffect #2: –¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è:`, {
          old: currentToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
          new: token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
          hasInitialLoad,
          cacheInitialized: sessionCache.isInitialized
        });
        
        setCurrentToken(token);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–æ—è–≤–∏–ª—Å—è –∏ –º—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        if (token && !hasInitialLoad) {
          console.log(`üöÄ [${providerId}] useEffect #2: –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞`);
          preloadAllData(true);
        } else if (!token && hasInitialLoad) {
          // –¢–æ–∫–µ–Ω –∏—Å—á–µ–∑ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          console.log(`üö™ [${providerId}] useEffect #2: –¢–æ–∫–µ–Ω –∏—Å—á–µ–∑, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
          setUser(null);
          setIsAuthenticated(false);
          // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          sessionCache.clear();
          setHasInitialLoad(false);
        } else if (token && hasInitialLoad && !sessionCache.isInitialized) {
          // –¢–æ–∫–µ–Ω –µ—Å—Ç—å, –Ω–æ –∫–µ—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          console.log(`üîÑ [${providerId}] useEffect #2: –¢–æ–∫–µ–Ω –µ—Å—Ç—å, –Ω–æ –∫–µ—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ`);
          preloadAllData(true);
        } else {
          // –¢–æ–∫–µ–Ω –µ—Å—Ç—å –∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          console.log(`‚úÖ [${providerId}] useEffect #2: –¢–æ–∫–µ–Ω –µ—Å—Ç—å, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
          setIsAuthenticated(hasAuthToken());
        }
      }
    }, 5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

    return () => {
      console.log(`üîß [${providerId}] useEffect #2: –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞`);
      isActive = false;
      clearInterval(checkTokenInterval);
    };
  }, [currentToken, hasInitialLoad, preloadAllData, providerId]);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextValue: DataPreloadContextType = {
    banners,
    user,
    cases,
    liveWins,
    isLoaded: !isLoading && !error,
    loading: isLoading,
    error,
    isAuthenticated,
    refreshBanners,
    refreshUser,
    refreshCases,
    refreshAllData,
    updateBalanceLocally,
    decreaseBalanceLocally,
    forceReloadData,
  };

  return (
    <DataPreloadContext.Provider value={contextValue}>
      {children}
    </DataPreloadContext.Provider>
  );
}