'use client';

import { useState, useCallback } from 'react';
import { API_BASE_URL } from '@/lib/config';
import useSPW from '@/hooks/useSPW';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
 */
interface DepositResponse {
  url: string;
  code: string;
  card: string;
}



/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –¥–µ–ø–æ–∑–∏—Ç–∞
 */
export default function useDepositAPI() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { makeAuthenticatedRequest, openPayment, spw } = useSPW();

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã
   * @param amount - —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
   */
  const createDeposit = useCallback(async (amount: number): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const response = await makeAuthenticatedRequest(
        `${API_BASE_URL}/payments/deposit`,
        {
          method: 'POST',
          body: JSON.stringify({ amount }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (429)
        if (response.status === 429) {
          console.log('‚è∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:', errorData);
          throw new Error("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
        if (response.status === 400 && errorData.error === "error._server.transactions.pay.senderNotEnoughBalance") {
          console.log('üí≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤:', errorData);
          throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤");
        }
        
        throw new Error(errorData.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      }

      const depositData: DepositResponse = await response.json();
      
      console.log('–î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', depositData);

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
      openPayment(depositData.code);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞';
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', errorMessage);
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, [makeAuthenticatedRequest, openPayment]);

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–ø–ª–∞—Ç—ã
   * @param onSuccess - –∫–æ–ª–±—ç–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
   * @param onError - –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–ø–ª–∞—Ç—ã
   */
  const setupPaymentHandlers = useCallback((
    onSuccess?: () => void,
    onError?: (error: string) => void
  ) => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã
    const handleOpenPaymentResponse = () => {
      console.log('–û–∫–Ω–æ –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ, –∂–¥—ë–º –æ–ø–ª–∞—Ç—É');
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã
    const handleOpenPaymentError = (err: string) => {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã: ${err}`);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã");
      onError?.("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã");
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    const handlePaymentResponse = () => {
      console.log('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞');
      setError(null);
      onSuccess?.();
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –æ–ø–ª–∞—Ç—ã
    const handlePaymentError = (err: string) => {
      console.error(`–û–ø–ª–∞—Ç–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å! –û—à–∏–±–∫–∞: ${err}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
      let errorMessage = "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã";
      if (err.includes("senderNotEnoughBalance")) {
        console.log('üí≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ handlePaymentError:', err);
        errorMessage = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤";
      }
      
      setError(errorMessage);
      onError?.(errorMessage);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    spw.on('openPaymentResponse', handleOpenPaymentResponse);
    spw.on('openPaymentError', handleOpenPaymentError);
    spw.on('paymentResponse', handlePaymentResponse);
    spw.on('paymentError', handlePaymentError);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    return () => {
      spw.off('openPaymentResponse', handleOpenPaymentResponse);
      spw.off('openPaymentError', handleOpenPaymentError);
      spw.off('paymentResponse', handlePaymentResponse);
      spw.off('paymentError', handlePaymentError);
    };
  }, [spw]);

  return {
    createDeposit,
    setupPaymentHandlers,
    isLoading,
    error,
    clearError: () => setError(null),
  };
}