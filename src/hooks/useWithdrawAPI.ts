'use client';

import { useState, useCallback } from 'react';
import { API_BASE_URL } from '@/lib/config';
import useSPW from '@/hooks/useSPW';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
 */
interface WithdrawRequest {
  amount: number;
  cardId: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
interface WithdrawErrorResponse {
  message: string;
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
 */
export default function useWithdrawAPI() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { makeAuthenticatedRequest } = useSPW();

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
   * @param amount - —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞
   * @param cardId - ID –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
   */
  const createWithdraw = useCallback(async (amount: number, cardId: string): Promise<boolean> => {
    setIsLoading(true);
    setError(null);

    try {
      const requestBody: WithdrawRequest = {
        amount,
        cardId
      };

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥:', requestBody);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
      const response = await makeAuthenticatedRequest(
        `${API_BASE_URL}/payments/withdraw`,
        {
          method: 'POST',
          body: JSON.stringify(requestBody),
        }
      );

      if (!response.ok) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        try {
          const errorData: WithdrawErrorResponse = await response.json();
          console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:', errorData);
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (429)
          if (response.status === 429) {
            console.log('‚è∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ:', errorData);
            throw new Error("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
          }
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç—ã
          if (errorData.message === "Receiver card not found.") {
            console.log('üí≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç—ã:', errorData);
            throw new Error("–î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
          }
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ bad request –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
          if (response.status === 400) {
            console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ bad request –ø—Ä–∏ –≤—ã–≤–æ–¥–µ:', errorData);
            throw new Error("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ");
          }
          
          throw new Error(errorData.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        } catch (err) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –Ω–æ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
          if (response.status === 429) {
            throw new Error("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
          }
          if (response.status === 400) {
            throw new Error("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ");
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ Error –∏–∑ –±–ª–æ–∫–∞ try –≤—ã—à–µ, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
          if (err instanceof Error) {
            throw err;
          }
          
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }
      }

      // –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ (–∫–æ–¥ 200)
      console.log('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      return true;

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤';
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥:', errorMessage);
      setError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [makeAuthenticatedRequest]);

  return {
    createWithdraw,
    isLoading,
    error,
    clearError: () => setError(null),
  };
}