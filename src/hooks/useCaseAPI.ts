'use client';

import { useEffect, useState } from 'react';
import { getAuthToken } from '@/lib/auth';
import { API_BASE_URL, isDevelopment, DEV_CONFIG } from '@/lib/config';
import { CaseData } from './useCasesAPI';
import { generateRandomItems } from '@/lib/caseUtils';

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–µ–π—Å–∞ –∏–∑ API
 * @param caseId - ID –∫–µ–π—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–µ–π—Å–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–∫–æ–π
 */
export default function useCaseAPI(caseId: string) {
  const [caseData, setCaseData] = useState<CaseData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –∏–∑ API
   */
  const fetchCaseData = async () => {
    try {
      setLoading(true);
      setError(null);

      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log('üîß Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ–π—Å–∞', caseId);
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –ò—â–µ–º –∫–µ–π—Å –≤ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const mockCase = DEV_CONFIG.mockCases.find(c => c.id === caseId);
        
        if (mockCase) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
          const caseWithItems = {
            ...mockCase,
            description: mockCase.description || null,
            items: mockCase.items || generateRandomItems(mockCase.price)
          };
          setCaseData(caseWithItems);
        } else {
          // –ï—Å–ª–∏ –∫–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
          const defaultCase: CaseData = {
            id: caseId,
            name: '–°–ª—É—á–∞–π–Ω—ã–π –∫–µ–π—Å',
            description: '–≠—Ç–æ—Ç –∫–µ–π—Å –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ dev —Ä–µ–∂–∏–º–µ',
            imageUrl: '/09b1b0e86eb0cd8a7909f6f74b56ddc17804658d.png',
            price: 16,
            items: generateRandomItems(16)
          };
          setCaseData(defaultCase);
        }
        return;
      }

      const token = getAuthToken();
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const response = await fetch(
        `${API_BASE_URL}/cases/${caseId}`,
        {
          method: 'GET',
          headers: {
            'accept': '*/*',
            'Authorization': token,
          },
        }
      );

      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`);
      }

      const data: CaseData = await response.json();
      setCaseData(data);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–∞:', errorMessage);
      setCaseData(null);
    } finally {
      setLoading(false);
    }
  };

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞
   */
  const refresh = () => {
    fetchCaseData();
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ID –∫–µ–π—Å–∞
  useEffect(() => {
    if (caseId) {
      fetchCaseData();
    }
  }, [caseId]);

  return {
    caseData,
    loading,
    error,
    refresh,
  };
}