'use client';

import React, { createContext, useContext, useEffect, useState, ReactNode, useCallback } from 'react';
import { APIBanner } from '@/hooks/useBannersAPI';
import { APIUser } from '@/hooks/useUserAPI';
import { CaseData } from '@/hooks/useCasesAPI';
import { LiveWinData } from '@/hooks/useLiveWins';
import { getAuthToken, hasAuthToken } from '@/lib/auth';
import { API_ENDPOINTS, DEV_CONFIG, isDevelopment, API_BASE_URL } from '@/lib/config';
import { generateRandomItems } from '@/lib/caseUtils';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface PreloadedData {
  banners: APIBanner[];
  user: APIUser | null;
  cases: CaseData[];
  liveWins: LiveWinData[];
  isLoaded: boolean;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏
interface DataPreloadContextType extends PreloadedData {
  refreshBanners: () => Promise<void>;
  refreshUser: () => Promise<void>;
  refreshCases: () => Promise<void>;
  refreshAllData: () => Promise<void>;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const DataPreloadContext = createContext<DataPreloadContextType | undefined>(undefined);

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const usePreloadedData = () => {
  const context = useContext(DataPreloadContext);
  if (context === undefined) {
    throw new Error('usePreloadedData –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ DataPreloadProvider');
  }
  return context;
};

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const mockBanners: APIBanner[] = [
  { id: '1', imageUrl: '/Frame 116.png', url: '/news/1' },
  { id: '2', imageUrl: '/image 27.png', url: '/news/2' }
];

const mockUser: APIUser = {
  id: 'dev-user-id',
  nickname: 'DevUser',
  balance: 1000,
  level: 5,
  avatarUrl: 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/player_head/icon',
  permission: 'user'
};

const mockLiveWins: LiveWinData[] = [
  {
    id: 'mock-1',
    playerName: 'Player123',
    rarity: 'Legendary',
    percentage: '0.01%',
    itemImage: 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/netherite_sword/icon',
    itemName: '–ó–æ–ª–æ—Ç–æ–π –º–µ—á',
    apValue: 999.5,
    amount: 1,
    timestamp: new Date(Date.now() - 1000 * 60 * 5)
  },
  {
    id: 'mock-2',
    playerName: 'GamerPro',
    rarity: 'Epic',
    percentage: '0.5%',
    itemImage: 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/diamond_chestplate/icon',
    itemName: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —â–∏—Ç',
    apValue: 250.3,
    amount: 2,
    timestamp: new Date(Date.now() - 1000 * 60 * 15)
  },
  {
    id: 'mock-3',
    playerName: 'LuckyOne',
    rarity: 'Rare',
    percentage: '2.5%',
    itemImage: 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/diamond/icon',
    itemName: '–†–µ–¥–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª',
    apValue: 100.7,
    amount: 16,
    timestamp: new Date(Date.now() - 1000 * 60 * 30)
  }
];

interface DataPreloadProviderProps {
  children: ReactNode;
}

export default function DataPreloadProvider({ children }: DataPreloadProviderProps) {
  const [banners, setBanners] = useState<APIBanner[]>([]);
  const [user, setUser] = useState<APIUser | null>(null);
  const [cases, setCases] = useState<CaseData[]>([]);
  const [liveWins, setLiveWins] = useState<LiveWinData[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentToken, setCurrentToken] = useState<string | null>(getAuthToken());
  const [hasInitialLoad, setHasInitialLoad] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤
  const loadBanners = async (): Promise<APIBanner[]> => {
    try {
      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log('üîß Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –±–∞–Ω–Ω–µ—Ä—ã');
        return [...mockBanners];
      }

      const token = getAuthToken();
      if (!token) {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä
        return [{
          id: 'default',
          imageUrl: '/Frame 116.png',
          url: '/news/1'
        }];
      }

      const response = await fetch(API_ENDPOINTS.banners, {
        method: 'GET',
        headers: {
          'accept': '*/*',
          'Authorization': `${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API –±–∞–Ω–Ω–µ—Ä–æ–≤: ${response.status}`);
      }

      return await response.json();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–Ω–Ω–µ—Ä–æ–≤:', err);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return [{
        id: 'default',
        imageUrl: '/Frame 116.png',
        url: '/news/1'
      }];
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUser = async (): Promise<APIUser | null> => {
    try {
      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log('üîß Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return { ...mockUser };
      }

      const token = getAuthToken();
      if (!token) {
        return null;
      }

      const response = await fetch(API_ENDPOINTS.users.me, {
        method: 'GET',
        headers: {
          'accept': '*/*',
          'Authorization': `${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.status}`);
      }

      return await response.json();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      return null;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤
  const loadCases = async (): Promise<CaseData[]> => {
    try {
      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log('üîß Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –∫–µ–π—Å—ã');
        return DEV_CONFIG.mockCases.map(caseData => ({
          ...caseData,
          description: caseData.description || null,
          items: caseData.items || generateRandomItems(caseData.price)
        }));
      }

      const token = getAuthToken();
      if (!token) {
        return [];
      }

      const response = await fetch(`${API_BASE_URL}/cases?page=1&pageSize=50`, {
        method: 'GET',
        headers: {
          'accept': '*/*',
          'Authorization': token,
        },
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API –∫–µ–π—Å–æ–≤: ${response.status}`);
      }

      const data = await response.json();
      return data.cases || [];
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤:', err);
      return [];
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∏–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π (–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
  const loadInitialLiveWins = async (): Promise<LiveWinData[]> => {
    // –î–ª—è –∂–∏–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º WebSocket, 
    // –Ω–æ –º–æ–∂–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–∏
    try {
      // –í dev —Ä–µ–∂–∏–º–µ –∏–ª–∏ –∫–∞–∫ fallback –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (isDevelopment && DEV_CONFIG.skipAuth) {
        console.log('üîß Dev —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –≤—ã–∏–≥—Ä—ã—à–∏');
        return [...mockLiveWins];
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –∏–∑ API
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏ –∫–∞–∫ fallback
      return [...mockLiveWins];
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π:', err);
      return [...mockLiveWins];
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const preloadAllData = useCallback(async (isInitialLoad = false) => {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      if (isInitialLoad || !hasInitialLoad) {
        setIsLoading(true);
        setError(null);
      }

      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      const authenticated = hasAuthToken();
      setIsAuthenticated(authenticated);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const [bannersData, userData, casesData, liveWinsData] = await Promise.all([
        loadBanners(),
        loadUser(),
        loadCases(),
        loadInitialLiveWins()
      ]);

      setBanners(bannersData);
      setUser(userData);
      setCases(casesData);
      setLiveWins(liveWinsData);

      console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      if (isInitialLoad || !hasInitialLoad) {
        await new Promise(resolve => setTimeout(resolve, 500));
        setHasInitialLoad(true);
      }

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', errorMessage);
    } finally {
      // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      if (isInitialLoad || !hasInitialLoad) {
        setIsLoading(false);
      }
    }
  }, [hasInitialLoad]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const refreshBanners = async () => {
    try {
      const bannersData = await loadBanners();
      setBanners(bannersData);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–æ–≤:', err);
    }
  };

  const refreshUser = async () => {
    try {
      console.log('üîÑ refreshUser: –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const oldBalance = user?.balance;
      console.log('üí∞ refreshUser: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', oldBalance);
      
      const userData = await loadUser();
      console.log('üìä refreshUser: –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      console.log('üí∞ refreshUser: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', userData?.balance);
      
      setUser(userData);
      setIsAuthenticated(hasAuthToken());
      
      console.log('‚úÖ refreshUser: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      if (oldBalance !== userData?.balance) {
        console.log(`üí∏ refreshUser: –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${oldBalance} –Ω–∞ ${userData?.balance}`);
      }
    } catch (err) {
      console.error('‚ùå refreshUser: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    }
  };

  const refreshCases = async () => {
    try {
      const casesData = await loadCases();
      setCases(casesData);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–æ–≤:', err);
    }
  };

  const refreshAllData = async () => {
    await preloadAllData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–∫–∞–∑–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –≤ dev —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    const token = getAuthToken();
    const shouldLoad = token || (isDevelopment && DEV_CONFIG.skipAuth);
    
    if (shouldLoad) {
      preloadAllData(true);
    } else {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      setIsLoading(true);
    }
  }, [preloadAllData]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    const checkTokenInterval = setInterval(() => {
      const token = getAuthToken();
      if (token !== currentToken) {
        console.log('üîÑ –¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        setCurrentToken(token);
        
        if (token && !hasInitialLoad) {
          // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
          preloadAllData(true);
        } else if (token && hasInitialLoad) {
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
          preloadAllData(false);
        }
      }
    }, 1000);

    return () => clearInterval(checkTokenInterval);
  }, [currentToken, hasInitialLoad, preloadAllData]);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextValue: DataPreloadContextType = {
    banners,
    user,
    cases,
    liveWins,
    isLoaded: !isLoading && !error,
    loading: isLoading,
    error,
    isAuthenticated,
    refreshBanners,
    refreshUser,
    refreshCases,
    refreshAllData,
  };

  return (
    <DataPreloadContext.Provider value={contextValue}>
      {children}
    </DataPreloadContext.Provider>
  );
}