'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { RarityType } from '@/components/ui/RarityCard';
import { hasAuthToken } from '@/lib/auth';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebSocket
interface WSUser {
  Id: string;
  Username: string;
  AvatarUrl: string | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞ –∏–∑ WebSocket
interface WSCase {
  Id: string;
  Name: string;
  Description: string;
  ImageUrl: string | null;
  Price: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ WebSocket
interface WSItem {
  Id: string;
  Name: string;
  Description: string | null;
  ImageUrl: string;
  Amount: number;
  Price: number;
  PercentChance: number;
  Rarity: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–∞ –∏–∑ WebSocket
interface WSWinData {
  user: WSUser;
  case: WSCase;
  item: WSItem;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã–∏–≥—Ä—ã—à–∞
interface WSWinMessage {
  type: 'message';
  channel: 'LiveWins';
  data: WSWinData;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è KeepAlive
interface WSKeepAliveMessage {
  type: 'KeepAlive';
  timestamp: number;
}

// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
type WSMessage = WSWinMessage | WSKeepAliveMessage;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–∞
export interface LiveWinData {
  id: string;
  playerName: string;
  rarity: RarityType;
  percentage: string;
  itemImage: string;
  itemName: string;
  apValue: number;
  amount: number;
  timestamp: Date;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏–∑ API –≤ —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const mapRarityToType = (rarity: string): RarityType => {
  switch (rarity.toLowerCase()) {
    case 'common':
      return 'Common';
    case 'uncommon':
      return 'Uncommon';
    case 'rare':
      return 'Rare';
    case 'epic':
      return 'Epic';
    case 'legendary':
      return 'Legendary';
    default:
      return 'Common';
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö WebSocket –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const transformWSData = (wsData: WSWinData, messageCounter: number): LiveWinData => {
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö
  const decodeUnicode = (str: string): string => {
    try {
      return JSON.parse(`"${str}"`);
    } catch {
      return str;
    }
  };

  // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const uniqueId = `ws-${wsData.user.Id}-${wsData.item.Id}-${wsData.case.Id}-${Date.now()}-${messageCounter}-${Math.random().toString(36).substr(2, 9)}`;

  return {
    id: uniqueId,
    playerName: wsData.user.Username,
    rarity: mapRarityToType(wsData.item.Rarity),
    percentage: `${wsData.item.PercentChance.toFixed(2)}%`,
    itemImage: wsData.item.ImageUrl || 'https://assets.zaralx.ru/api/v1/minecraft/vanilla/item/cobblestone/icon',
    itemName: decodeUnicode(wsData.item.Name),
    apValue: parseFloat(wsData.item.Price.toFixed(1)), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –¥–µ—Å—è—Ç—ã—Ö
    amount: wsData.item.Amount || 1, // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    timestamp: new Date()
  };
};

interface UseLiveWinsOptions {
  initialData?: LiveWinData[];
}

export default function useLiveWins(options: UseLiveWinsOptions = {}) {
  const [wins, setWins] = useState<LiveWinData[]>(options.initialData || []);
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const initTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const maxReconnectAttempts = 5;
  const reconnectAttempts = useRef(0);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –∏ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const messageCounterRef = useRef(0);
  const processingQueueRef = useRef<LiveWinData[]>([]);
  const isProcessingRef = useRef(false);
  const processMessageQueueRef = useRef<(() => void) | undefined>(undefined);
  const lastPageVisitRef = useRef<number>(Date.now());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const processMessageQueue = useCallback(() => {
    if (isProcessingRef.current || processingQueueRef.current.length === 0) {
      return;
    }

    isProcessingRef.current = true;
    
    // –ë–µ—Ä–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const newWins = [...processingQueueRef.current];
    processingQueueRef.current = [];

    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ ${newWins.length} –≤—ã–∏–≥—Ä—ã—à–µ–π`);

    setWins(prevWins => {
      // –°–æ–∑–¥–∞–µ–º Set —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const existingIds = new Set(prevWins.map(win => win.id));
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏
      const uniqueNewWins = newWins.filter(newWin => !existingIds.has(newWin.id));
      
      if (uniqueNewWins.length === 0) {
        console.log('üîÑ –í—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ –≤ –ø–∞–∫–µ—Ç–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return prevWins;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const updatedWins = [...uniqueNewWins, ...prevWins].slice(0, 10);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${uniqueNewWins.length} –Ω–æ–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π, –≤—Å–µ–≥–æ: ${updatedWins.length}`);
      
      return updatedWins;
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      isProcessingRef.current = false;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
      if (processingQueueRef.current.length > 0) {
        processMessageQueueRef.current?.();
      }
    }, 50);
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ ref –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ connectWebSocket
  processMessageQueueRef.current = processMessageQueue;

  const connectWebSocket = useCallback(() => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebSocket –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      if (typeof WebSocket === 'undefined') {
        console.error('WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        setError('WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        return;
      }

      // URL WebSocket –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
      const wsUrl = 'wss://battle-api.chasman.engineer/ws';
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:', wsUrl);
      wsRef.current = new WebSocket(wsUrl);

      wsRef.current.onopen = () => {
        console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        setIsConnected(true);
        setError(null);
        reconnectAttempts.current = 0;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª LiveWins
        const subscribeMessage = {
          type: 'subscribe',
          channel: 'LiveWins'
        };
        wsRef.current?.send(JSON.stringify(subscribeMessage));
      };

      wsRef.current.onmessage = (event) => {
        try {
          const message: WSMessage = JSON.parse(event.data);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è KeepAlive –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          if (message.type === 'KeepAlive') {
            console.log('–ü–æ–ª—É—á–µ–Ω KeepAlive:', new Date(message.timestamp * 1000));
            return;
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ LiveWins —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π
          if (message.type === 'message' && message.channel === 'LiveWins' && message.data) {
            console.log('–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à:', message.data);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            messageCounterRef.current += 1;
            
            const newWin = transformWSData(message.data, messageCounterRef.current);
            console.log('üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:', newWin);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processingQueueRef.current.push(newWin);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            setTimeout(() => {
              processMessageQueueRef.current?.();
            }, 10);
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket:', err);
        }
      };

      wsRef.current.onclose = (event) => {
        console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', {
          code: event.code,
          reason: event.reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
          wasClean: event.wasClean,
          timestamp: new Date().toISOString()
        });
        setIsConnected(false);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let errorMessage = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ';
        if (event.code === 1006) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
        } else if (event.code === 1002) {
          errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ WebSocket';
        } else if (event.code === 1003) {
          errorMessage = '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö';
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {
          reconnectAttempts.current++;
          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);
          
          console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts.current}/${maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
          
          reconnectTimeoutRef.current = setTimeout(() => {
            connectWebSocket();
          }, delay);
        } else if (reconnectAttempts.current >= maxReconnectAttempts) {
          setError(`${errorMessage}. –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
        } else {
          setError(errorMessage);
        }
      };

      wsRef.current.onerror = (event) => {
        const ws = event.target as WebSocket;
        const readyStateNames = {
          0: 'CONNECTING',
          1: 'OPEN', 
          2: 'CLOSING',
          3: 'CLOSED'
        };
        
        console.error('–û—à–∏–±–∫–∞ WebSocket:', {
          type: event.type,
          readyState: ws?.readyState,
          readyStateName: readyStateNames[ws?.readyState as keyof typeof readyStateNames] || 'UNKNOWN',
          url: wsUrl,
          timestamp: new Date().toISOString()
        });
        setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      };

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', {
        message: err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        name: err instanceof Error ? err.name : 'Unknown',
        stack: err instanceof Error ? err.stack : undefined,
        url: 'wss://battle-api.chasman.engineer/ws'
      });
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
  }, []);

  const disconnect = () => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    
    if (initTimeoutRef.current) {
      clearTimeout(initTimeoutRef.current);
      initTimeoutRef.current = null;
    }
    
    if (wsRef.current) {
      wsRef.current.close(1000, '–ù–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ');
      wsRef.current = null;
    }
    
    setIsConnected(false);
    reconnectAttempts.current = 0;
  };

  useEffect(() => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const initializeConnection = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!hasAuthToken()) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ');
        return;
      }

      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      if (wsRef.current?.readyState === WebSocket.CONNECTING || wsRef.current?.readyState === WebSocket.OPEN) {
        console.log('WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        return;
      }

      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É');
      
      // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ WebSocket
      initTimeoutRef.current = setTimeout(() => {
        connectWebSocket();
      }, 1000);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 100ms –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è
    const authCheckInterval = setInterval(() => {
      if (hasAuthToken()) {
        clearInterval(authCheckInterval);
        initializeConnection();
      }
    }, 100);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–∞–∫ –∏ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞
    const authTimeout = setTimeout(() => {
      clearInterval(authCheckInterval);
      console.log('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }, 10000);

    return () => {
      clearInterval(authCheckInterval);
      clearTimeout(authTimeout);
      disconnect();
    };
  }, [connectWebSocket]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (!document.hidden) {
        const now = Date.now();
        const timeSinceLastVisit = now - lastPageVisitRef.current;
        
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (timeSinceLastVisit > 5000) {
          console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π –ø–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          if (wsRef.current) {
            disconnect();
            setTimeout(() => {
              if (hasAuthToken()) {
                connectWebSocket();
              }
            }, 500);
          }
        }
        
        lastPageVisitRef.current = now;
      }
    };

    const handleFocus = () => {
      const now = Date.now();
      const timeSinceLastVisit = now - lastPageVisitRef.current;
      
      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ–∫—É—Å–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (timeSinceLastVisit > 3000) {
        console.log('üîÑ –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å –ø–æ—Å–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if (wsRef.current && hasAuthToken()) {
          disconnect();
          setTimeout(() => {
            connectWebSocket();
          }, 500);
        }
      }
      
      lastPageVisitRef.current = now;
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('focus', handleFocus);

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('focus', handleFocus);
    };
  }, [connectWebSocket]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const forceRefresh = useCallback(() => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    
    if (wsRef.current) {
      disconnect();
      setTimeout(() => {
        if (hasAuthToken()) {
          connectWebSocket();
        }
      }, 500);
    } else if (hasAuthToken()) {
      connectWebSocket();
    }
    
    lastPageVisitRef.current = Date.now();
  }, [connectWebSocket]);

  return {
    wins,
    isConnected,
    error,
    reconnect: connectWebSocket,
    disconnect,
    forceRefresh
  };
}